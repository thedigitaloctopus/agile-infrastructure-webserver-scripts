#!/bin/bash
############################################################################################################################
# Description: This script will install an SSL certificate when it is called from cron
# Date: 16/11/2016
# Author: Peter Winter
###########################################################################################################
# License Agreement:
# This file is part of The Agile Deployment Toolkit.
# The Agile Deployment Toolkit is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
# The Agile Deployment Toolkit is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# You should have received a copy of the GNU General Public License
# along with The Agile Deployment Toolkit.  If not, see <http://www.gnu.org/licenses/>.
#######################################################################################################
#######################################################################################################
#set -x

#Writing a lock file is not instant to the config directory because it is over s3fs. So, if we put some random delay in then we will know
#that the lock is generated by one particular webserver first. This matters for the SSL generation process because we don't want multiple
#webservers thinkin that they can issue a certificate at the same time because of rate limiting by the certificate issuer. This would
#bust our limit for a week if we had 5 or more webservers running and they all thought they could generate a certificate issuance request.
#In the unlikely case where 2 webservers generate the same delay period and have a race condition over who can issue the certificate
#even if both issue a certificate, our limit is 5 so, that doesn't scupper us in case of a rebuild from the build client needs to generate
#a new certificate also. It is very unlikely that more than 2 webservers would set the same randomised delay period.

delay1=(10 20 30 40 50 60 70 80 90 100 110 120 130 140 150 160 170 180 190 200 210 220 230 240 250 260 270 280 290 300)
delay2=(10 20 30 40 50 60 70 80 90 100 110 120 130 140 150 160 170 180 190 200 210 220 230 240 250 260 270 280 290 300)

delay1="`/bin/echo ${delay1[RANDOM%30]}`"
delay2="`/bin/echo ${delay2[RANDOM%30]}`"

delay="`/usr/bin/expr ${delay1} + ${delay2}`"

/bin/sleep ${delay}

if ( [ "`${HOME}/providerscripts/datastore/configwrapper/CheckConfigDatastore.sh "sslcertlock.file"`" = "0" ] )
then
    /usr/bin/touch ${HOME}/runtime/sslcertlock.file
    ${HOME}/providerscripts/datastore/configwrapper/PutToConfigDatastore.sh ${HOME}/runtime/sslcertlock.file 
    ${HOME}/security/InstallSSLCertificate.sh
    ${HOME}/providerscripts/datastore/configwrapper/DeleteFromConfigDatastore.sh "sslcertlock.file"
else
    /bin/echo "script already running"
fi


